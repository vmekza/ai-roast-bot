{"ast":null,"code":"var _jsxFileName = \"/Users/scarlet/TAMK/GIT/ai-roast-bot/frontend/src/components/RoastBot.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport { getRoast } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoastBot = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]); // Store full chat history\n  const [loading, setLoading] = useState(false);\n  const chatRef = useRef(null);\n  useEffect(() => {\n    var _chatRef$current;\n    // Auto-scroll to latest message\n    (_chatRef$current = chatRef.current) === null || _chatRef$current === void 0 ? void 0 : _chatRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleRoast = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: userInput,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setUserInput('');\n\n    // Get AI's roast\n    const generatedRoast = await getRoast(userInput, 'roast-user');\n    setMessages([...newMessages, {\n      text: generatedRoast,\n      sender: 'ai'\n    }]);\n    setLoading(false);\n  };\n  const handleRoastAI = async () => {\n    if (!userInput.trim()) return; // Don't allow empty messages\n    setLoading(true);\n\n    // Add user's roast message\n    const newMessages = [...messages, {\n      text: userInput,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setUserInput(''); // Clear input\n\n    // AI responds to the user's roast\n    const generatedRoast = await getRoast(userInput, 'roast-ai');\n    setMessages([...newMessages, {\n      text: generatedRoast,\n      sender: 'ai'\n    }]);\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col max-w-lg mx-auto bg-gray-900 text-white p-6 rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold text-center mb-4\",\n      children: \"\\uD83D\\uDD25 AI RoastBot \\uD83D\\uDD25\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-80 overflow-y-auto border border-gray-700 p-3 rounded-lg mb-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `p-3 my-1 rounded-lg max-w-xs text-white ${msg.sender === 'user' ? 'bg-blue-500' : 'bg-gray-700'}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"w-full p-2 border border-gray-600 rounded bg-gray-800 text-red\",\n      placeholder: \"Type something...\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mt-3\",\n      children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"flex-1 bg-red-500 hover:bg-red-600 text-white p-2 rounded\",\n        onClick: handleRoast,\n        disabled: loading,\n        children: loading ? 'Roasting...' : 'Roast Me!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), messages.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"flex-1 bg-green-500 hover:bg-green-600 text-white p-2 rounded\",\n        onClick: handleRoastAI,\n        disabled: loading,\n        children: loading ? 'Roasting AI...' : 'Roast the AI!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(RoastBot, \"ZGRqCSac9T/75vzRpenjqpTyxOc=\");\n_c = RoastBot;\nexport default RoastBot;\nvar _c;\n$RefreshReg$(_c, \"RoastBot\");","map":{"version":3,"names":["useState","useRef","useEffect","getRoast","jsxDEV","_jsxDEV","RoastBot","_s","userInput","setUserInput","messages","setMessages","loading","setLoading","chatRef","_chatRef$current","current","scrollIntoView","behavior","handleRoast","trim","newMessages","text","sender","generatedRoast","handleRoastAI","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","placeholder","value","onChange","e","target","length","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/scarlet/TAMK/GIT/ai-roast-bot/frontend/src/components/RoastBot.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { getRoast } from '../api';\n\nconst RoastBot = () => {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]); // Store full chat history\n  const [loading, setLoading] = useState(false);\n  const chatRef = useRef(null);\n\n  useEffect(() => {\n    // Auto-scroll to latest message\n    chatRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleRoast = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    // Add user message\n    const newMessages = [...messages, { text: userInput, sender: 'user' }];\n    setMessages(newMessages);\n    setUserInput('');\n\n    // Get AI's roast\n    const generatedRoast = await getRoast(userInput, 'roast-user');\n    setMessages([...newMessages, { text: generatedRoast, sender: 'ai' }]);\n    setLoading(false);\n  };\n\n  const handleRoastAI = async () => {\n    if (!userInput.trim()) return; // Don't allow empty messages\n    setLoading(true);\n\n    // Add user's roast message\n    const newMessages = [...messages, { text: userInput, sender: 'user' }];\n    setMessages(newMessages);\n    setUserInput(''); // Clear input\n\n    // AI responds to the user's roast\n    const generatedRoast = await getRoast(userInput, 'roast-ai');\n    setMessages([...newMessages, { text: generatedRoast, sender: 'ai' }]);\n\n    setLoading(false);\n  };\n\n  return (\n    <div className='flex flex-col max-w-lg mx-auto bg-gray-900 text-white p-6 rounded-lg shadow-md'>\n      <h1 className='text-2xl font-bold text-center mb-4'>ðŸ”¥ AI RoastBot ðŸ”¥</h1>\n\n      {/* Chat Messages */}\n      <div className='h-80 overflow-y-auto border border-gray-700 p-3 rounded-lg mb-4'>\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`flex ${\n              msg.sender === 'user' ? 'justify-end' : 'justify-start'\n            }`}\n          >\n            <p\n              className={`p-3 my-1 rounded-lg max-w-xs text-white ${\n                msg.sender === 'user' ? 'bg-blue-500' : 'bg-gray-700'\n              }`}\n            >\n              {msg.text}\n            </p>\n          </div>\n        ))}\n        <div ref={chatRef}></div>\n      </div>\n\n      {/* Input Field */}\n      <textarea\n        className='w-full p-2 border border-gray-600 rounded bg-gray-800 text-red'\n        placeholder='Type something...'\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n      ></textarea>\n\n      {/* Buttons */}\n      <div className='flex gap-2 mt-3'>\n        {messages.length === 0 && (\n          <button\n            className='flex-1 bg-red-500 hover:bg-red-600 text-white p-2 rounded'\n            onClick={handleRoast}\n            disabled={loading}\n          >\n            {loading ? 'Roasting...' : 'Roast Me!'}\n          </button>\n        )}\n        {messages.length > 0 && (\n          <button\n            className='flex-1 bg-green-500 hover:bg-green-600 text-white p-2 rounded'\n            onClick={handleRoastAI}\n            disabled={loading}\n          >\n            {loading ? 'Roasting AI...' : 'Roast the AI!'}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RoastBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}